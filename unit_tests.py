"""
Includes unit tests for evaluate(), generate() and calculate() functions.

Imports:
    unittest
    os
    helpers (app module)
    from mock: patch
    from anytree: Node

Classes:
    Node
    test_load_file
    test_generate
    test_visualise
    test_file_generate
    test_calculate
    test_evaluate
    test_analyse

Functions:
    test_no_file()
    test_generate_no_file()
    test_visualise_no_file()
    test_visualise_no_node()
    test_generate_file()
    test_calculate_no_file()
    test_calculate_score()
    test_evaluate_very_low()
    test_evaluate_low()
    test_evaluate_moderate()
    test_evaluate_high()
    test_evaluate_very_high()
    test_analyse_no_file()
    suite()
    tearDown()
"""

import unittest, helpers, os
from anytree import Node
from mock import patch

# Test nodes
root = Node("A", parent=None, value=0.0)
A1 = Node(name='A1', parent=root, value=3.0)
A2 = Node(name='A2', parent=root, value=0.0)
A21 = Node(name='A21', parent=A2, value=5.5)
A22 = Node(name='A22', parent=A2, value=3.0)
A3 = Node(name='A3', parent=root, value=2.0)

# Test dictionaries/variables
test_data = {"root": root, "A1": A1, "A2": A2, "A21": A21, "A22": A22, "A3": A3}
test_root = root


class test_load_file(unittest.TestCase):
    """
    Tests if load_file() functions returns error if provided with a wrong filename.
    Assumed file "foobazbar123.json" doesn't exist in the "data" folder. 
    """

    @patch('builtins.input', return_value="foobarbaz123.json")
    def test_no_file(self, input):
        """
        Tries to load "foobarbaz123.json" and checks if the application returns an error.
        """
        result = helpers.load_file()
        self.assertEqual(result, "File not found")


class test_generate(unittest.TestCase):
    """
    Tests if generate() function returns the expected error when no file
    is loaded to the memory.
    """

    @patch('helpers.root_node', Node("default"))  # Patches the global variable root_node
    def test_generate_no_file(self):
        """
        Tries to generate an attack tree with the default node and checks
        if the app returns an error.
        """
        result = helpers.generate()
        self.assertEqual(result, "No file loaded to the memory")


class test_visualise(unittest.TestCase):
    """
    Tests if visualise() function:
    - rejects invalid leaf node to visualise.
    - returns the expected error when no file is loaded to the memory.
    """

    @patch('helpers.root_node', Node("default"))  # Patches the global variable root_node
    def test_visualise_no_file(self):
        """
        Tries to visualise an attack tree with the default node and checks
        if the app returns an error.
        """
        result = helpers.visualise()
        self.assertEqual(result, "No file loaded to the memory")

    @patch('builtins.input', return_value="foobarbaz")
    @patch('helpers.nodes', test_data)  # Patches node dict with our test data
    @patch('helpers.root_node', test_root)  # Patches the root_node with the root of the test data
    def test_visualise_no_node(self, input):
        """
        Tries to visualise an attack tree from a node that do not exist
        and checks if the app returns an error.
        """
        result = helpers.visualise()
        self.assertEqual(result, "Node not found")

class test_file_generate(unittest.TestCase):
    """
    Tests if file_generate() function works as expected.
    """
    @patch('builtins.input', return_value="test_tree")
    def test_generate_file(self, input):
        """
        Checks if an attack tree with provided name is created.
        """
        result = helpers.file_generate(test_data, test_root)
        self.assertEqual(result, "File created")

    def tearDown(self):
        """
        Deletes the test_tree.png file generated by test_generate_file() function.
        """
        os.remove('trees/test_tree.png')


class test_calculate(unittest.TestCase):
    """
    Tests if calculate() function functions as expected.
    """

    @patch('helpers.root_node', Node("default"))  # Patches the global variable root_node
    def test_calculate_no_file(self):
        """
        Tries to calculate an overall risk value without loading a file
        and checks if the app returns an error.
        """
        result = helpers.calculate()
        self.assertEqual(result, "No file loaded to the memory")

    @patch('helpers.nodes', test_data)  # Patches node dict with our test data
    @patch('helpers.root_node', test_root)  # Patches the root_node with the root of the test data
    def test_calculate_score(self):
        """
        Tries to calculate the overall risk score with the test data and checks
        if it returns the expected value.
        """
        result = helpers.calculate()
        self.assertEqual(result, 3.08)


class test_evaluate(unittest.TestCase):
    """
    Tests if evaluate() function returns correct result according to the scale.
    """

    def test_evaluate_very_low(self):
        """
        Should return "VERY LOW"
        """
        root_node1 = Node(name="root_node1", parent=None, value=0.2)
        result = helpers.evaluate(root_node1)
        self.assertEqual(result, "VERY LOW")

    def test_evaluate_low(self):
        """
        Should return "LOW"
        """
        root_node2 = Node(name="root_node2", parent=None, value=2.0)
        result = helpers.evaluate(root_node2)
        self.assertEqual(result, "LOW")

    def test_evaluate_moderate(self):
        """
        Should return "MODERATE"
        """
        root_node3 = Node(name="root_node3", parent=None, value=3.7)
        result = helpers.evaluate(root_node3)
        self.assertEqual(result, "MODERATE")

    def test_evaluate_high(self):
        """
        Should return "HIGH"
        """
        root_node4 = Node(name="root_node4", parent=None, value=8.5)
        result = helpers.evaluate(root_node4)
        self.assertEqual(result, "HIGH")

    def test_evaluate_very_high(self):
        """
        Should return "VERY HIGH"
        """
        root_node5 = Node(name="root_node5", parent=None, value=9.7)
        result = helpers.evaluate(root_node5)
        self.assertEqual(result, "VERY HIGH")


class test_analyse(unittest.TestCase):
    """
    Tests if analyse() function returns the expected error when no file is loaded to the memory.
    """

    @patch('helpers.root_node', Node("default"))  # Patches the global variable root_node
    def test_analyse_no_file(self):
        """
        Tries to run analyse() function without loading a file
        and checks if the app returns an error.
        """
        result = helpers.analyse()
        self.assertEqual(result, "No file loaded to the memory")


def suite():
    """
    Creates the test suite for all the test classes we have here.
    """
    suite = unittest.TestSuite()
    suite.addTest(test_load_file('test_load_file_function'))
    suite.addTest(test_visualise('test_visualise_function'))
    suite.addTest(test_generate('test_generate_function'))
    suite.addTest(test_calculate('test_calculate_function'))
    suite.addTest(test_evaluate('test_evaluate_function'))
    suite.addTest(test_analyse('test_analyse_function'))
    suite.addTest(test_file_generate('test_file_generate_function'))
    return suite




if __name__ == '__main__':
    runner = unittest.TextTestRunner()
    runner.run(suite())
